MODULE      CPU
TITLE      'Caltech10 CPU Test Vectors'


" Description:  These are the test vectors for the Caltech10 CPU.  This is a
"               Harvard architecture CPU and as such has separate program and
"               data address and data busses.  The program bus is read only
"               and has no control signals.  It has 13 bits of address and 16
"               bits of data.  The data bus is read/write and has separate
"               read and write signals along with a Memory/IO signal to
"               indicate if memory or I/O is being accessed.  The bus has 8
"               bits of address and 8 bits of data.  On reset the program
"               counter is set to 0.
"
"               These vectors test the NEG instruction.
"
" Inputs:         ProgramDB[15..0]  - the 16-bit program data bus
"                 Reset             - system reset signal
"                 Clock             - system clock
"
" I/O:            DataDB[7..0]      - the 8-bit data data bus
"
" Outputs:        ProgramAB[12..0]  - the 13-bit program address bus
"                 DataAB[7..0]      - the 8-bit data address bus
"                 RD                - read signal for the data data bus
"                 WR                - write signal for the data data bus
"                 IO                - memory (0) or I/O (1) is being accessed
"
" Status Outputs: Accum[7..0]       - the 8-bit accumulator
"                 Flags[7..0]       - the 8-bit flag register
"                 XReg[7..0]        - the 8-bit X register
"                 SReg[7..0]        - the 8-bit S register


" Revision History:
" 11/05/17   Glen George  Initial Revision
" 02/12/18   Glen George  Updated comments



" Pin/Signal Declarations

" Inputs

ProgramDB15..ProgramDB0	pin;	"input  16-bit instruction data bus
Reset           	pin;	"input  system reset signal
Clock           	pin;	"input  system clock


" I/O

DataDB7..DataDB0	pin;	"I/O  8-bit Data data bus


" Outputs

ProgramAB12..ProgramAB0	pin;	"output  the 13-bit Program address bus
DataAB7..DataAB0	pin;	"output  the 8-bit Data address bus
RD			pin;	"output  read signal for the Data data bus
WR			pin;	"output  write signal for the Data data bus
IO			pin;	"output  accessing memory (0) or I/O (1)


" Status Outputs

Accum7..Accum0		pin;	"the accumulator
Flags7..Flags0		pin;	"the flags
XReg7..XReg0		pin;	"the X register
SReg7..SReg0		pin;	"the S register
Test7..Test0		pin;


" Busses

ProgramAB  =  [ProgramAB12..ProgramAB0];"Program address bus
ProgramDB  =  [ProgramDB15..ProgramDB0];"16-bit instruction data bus
DataAB     =  [DataAB7..DataAB0];	"Data address bus
DataDB     =  [DataDB7..DataDB0];	"Data data bus
Accum      =  [Accum7..Accum0];		"the accumulator
Flags      =  [Flags7..Flags0];		"flags from the ALU
XReg       =  [XReg7..XReg0];		"X register
SReg       =  [SReg7..SReg0];		"S register



" Test Vectors

" try some instructions to test the design

TEST_VECTORS ( [ Reset, Clock, ProgramDB, DataDB ] ->
               [ ProgramAB, DataAB, RD, WR, IO, DataDB ] )

" ; reset and test NEG instruction

[ 1, 0, ^H1F80,  .Z. ] -> [    .X.,  .X., .X., .X., .X.,  .X. ]; " reset CPU
[ 1, 1, ^H1F80,  .Z. ] -> [    .X.,  .X., .X., .X., .X.,  .X. ];
[ 1, 0, ^H1F80,  .Z. ] -> [    .X.,  .X.,  0 ,  0 , .X.,  .X. ];
[ 1, 1, ^H1F80,  .Z. ] -> [    .X.,  .X.,  0 ,  0 , .X.,  .X. ];
[ 1, 0, ^H1F80,  .Z. ] -> [ ^H0000,  .X.,  0 ,  0 ,  0 ,  .X. ];
[ 1, 1, ^H1F80,  .Z. ] -> [ ^H0000,  .X.,  0 ,  0 ,  0 ,  .X. ];
[ 0, 0, ^HC900, ^HA2 ] -> [    .X.,  .X.,  0 ,  0 ,  0 ,  .X. ]; "    JMP	$0900
[ 0, 1, ^HC900, ^HD8 ] -> [    .X.,  .X., .X., .X., .X.,  .X. ]; " ;unconditional jump to set PC
[ 0, 0, ^H8900, ^H3E ] -> [    .X.,  .X.,  0 ,  0 ,  0 ,  .X. ]; "    LDI	$00
[ 0, 1, ^H8900, ^HC1 ] -> [    .X.,  .X., .X., .X., .X.,  .X. ]; " ;branch slot, clear accumulator
[ 0, 0, ^H2700, ^HC7 ] -> [ ^H0900,  .X.,  0 ,  0 ,  0 ,  .X. ]; "    NEG
[ 0, 1, ^H2700, ^HE3 ] -> [    .X.,  .X., .X., .X., .X.,  .X. ]; " 
[ 0, 0, ^HA055, ^HBC ] -> [ ^H0901,  .X.,  0 ,  0 ,  0 ,  .X. ]; "    STD	$55
[ 0, 1, ^HA055, ^H58 ] -> [    .X.,  .X., .X., .X., .X.,  .X. ]; " ;should store 00 at 55
[ 0, 0, ^H0E00,  .Z. ] -> [ ^H0902, ^H55,  0 ,  1 ,  0 , ^H00 ]; "    PUSHF
[ 0, 1, ^H0E00, ^HB0 ] -> [    .X.,  .X., .X., .X., .X.,  .X. ]; " ;check flags (Z set)
[ 0, 0, ^H8980,  .Z. ] -> [ ^H0903, ^HFF,  0 ,  1 ,  0 , ^H01 ]; "    LDI	$80
[ 0, 1, ^H8980, ^HC8 ] -> [    .X.,  .X., .X., .X., .X.,  .X. ]; " ;put 80 in accumulator
[ 0, 0, ^H2700, ^HEC ] -> [ ^H0904,  .X.,  0 ,  0 ,  0 ,  .X. ]; "    NEG
[ 0, 1, ^H2700, ^HAC ] -> [    .X.,  .X., .X., .X., .X.,  .X. ]; " 
[ 0, 0, ^HA055, ^HB2 ] -> [ ^H0905,  .X.,  0 ,  0 ,  0 ,  .X. ]; "    STD	$55
[ 0, 1, ^HA055, ^HB0 ] -> [    .X.,  .X., .X., .X., .X.,  .X. ]; " ;should store 80 at 55
[ 0, 0, ^H0E00,  .Z. ] -> [ ^H0906, ^H55,  0 ,  1 ,  0 , ^H80 ]; "    PUSHF
[ 0, 1, ^H0E00, ^HFE ] -> [    .X.,  .X., .X., .X., .X.,  .X. ]; " ;check flags (C, S, V set)
[ 0, 0, ^H8901,  .Z. ] -> [ ^H0907, ^HFE,  0 ,  1 ,  0 , ^H0E ]; "    LDI	$1
[ 0, 1, ^H8901, ^H01 ] -> [    .X.,  .X., .X., .X., .X.,  .X. ]; " ;put 01 in accumulator
[ 0, 0, ^H2700, ^HDF ] -> [ ^H0908,  .X.,  0 ,  0 ,  0 ,  .X. ]; "    NEG
[ 0, 1, ^H2700, ^H6E ] -> [    .X.,  .X., .X., .X., .X.,  .X. ]; " 
[ 0, 0, ^HA055, ^HB6 ] -> [ ^H0909,  .X.,  0 ,  0 ,  0 ,  .X. ]; "    STD	$55
[ 0, 1, ^HA055, ^H98 ] -> [    .X.,  .X., .X., .X., .X.,  .X. ]; " ;should store FF at 55
[ 0, 0, ^H0E00,  .Z. ] -> [ ^H090A, ^H55,  0 ,  1 ,  0 , ^HFF ]; "    PUSHF
[ 0, 1, ^H0E00, ^H02 ] -> [    .X.,  .X., .X., .X., .X.,  .X. ]; " ;check flags (S, C set)
[ 0, 0, ^H89DD,  .Z. ] -> [ ^H090B, ^HFD,  0 ,  1 ,  0 , ^H0A ]; "    LDI	$DD
[ 0, 1, ^H89DD, ^HB2 ] -> [    .X.,  .X., .X., .X., .X.,  .X. ]; " ;put DD in accumulator
[ 0, 0, ^H2700, ^H85 ] -> [ ^H090C,  .X.,  0 ,  0 ,  0 ,  .X. ]; "    NEG
[ 0, 1, ^H2700, ^H7A ] -> [    .X.,  .X., .X., .X., .X.,  .X. ]; " 
[ 0, 0, ^HA055, ^HDD ] -> [ ^H090D,  .X.,  0 ,  0 ,  0 ,  .X. ]; "    STD	$55
[ 0, 1, ^HA055, ^H72 ] -> [    .X.,  .X., .X., .X., .X.,  .X. ]; " ;should store 23 at 55
[ 0, 0, ^H0E00,  .Z. ] -> [ ^H090E, ^H55,  0 ,  1 ,  0 , ^H23 ]; "    PUSHF
[ 0, 1, ^H0E00, ^HEB ] -> [    .X.,  .X., .X., .X., .X.,  .X. ]; " ;check flags (C set)
[ 0, 0, ^H1F80,  .Z. ] -> [ ^H090F, ^HFC,  0 ,  1 ,  0 , ^H08 ]; "    NOP
[ 0, 1, ^H1F80, ^H84 ] -> [    .X.,  .X., .X., .X., .X.,  .X. ]; " ;NOP to flush out the last write


END  CPU
